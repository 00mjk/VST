HOW TO BUILD:
 (cd compcert; ./make)   # or, see EXTERNAL COMPCERT below
 make  # build the VST

The Verified Software Toolchain is organized into separate subprojects,
each in a separate directory:

msl -   Mechanized Software Library
examples - examples of how to use the msl
compcert -   front end of the CompCert compiler, specification of C light
sepcomp - the theory and practice of how to specify 
    shared-memory interaction (for separation compilation and concurrency) 
    for CompCert
veric -  program logic (and soundness proof) for Verifiable C
floyd -  tactics for applying the separation logic
progs -  sample programs, with their verifications
veristar - decision procedure for entailments in separation logic,
           proved sound w.r.t. veric  (needs maintenance to bring it up to date)

The dependencies are:

msl:   # no dependency on other directories
examples: msl
compcert: # no dependency on other directories
sepcomp: compcert
veric:  msl compcert sepcomp
floyd: msl sepcomp compcert veric
progs: msl sepcomp compcert veric floyd

In general, we Import using "-I" (nonrecursive) instead of "-R"
(recursive).  This means modules need to be named using qualified names.
Thus, in "veric/expr.v" we write "Require Import msl.msl_standard"
instead of "Require Import msl_standard".  To make this work, the loadpaths
need to be set up properly; the file ".loadpath" (built by "make .loadpath")
shows what -I includes to use.

USING PROOF GENERAL AND COQIDE:
To use either of these interactive development environments you will
need to have the right load path.  This can be done by command-line
arguments to coqide or coqtop.  The precise command-line arguments
to use are in the file .loadpath, which is constructed automatically
when you do "make".  For example:    coqide `cat .loadpath` veric/base.v
will run coqide with the right options.

EXTERNAL COMPCERT: 
The VST imports from the CompCert verified C compiler, the definition
of C light syntax and operational semantics.  For the convenience of
VST users, the vst/compcert directory is a copy (with permission) of
the front-end portions of compcert.  We use compcert's own Makefile to
build it.  However, our "Makefile.clight" modifies CompCert's
makefile, so as to build only the front end.
  You may choose to ignore the vst/compcert directory and have
the VST import from a build of compcert that you have installed in
another directory, for example,  ../compcert.
To do this, create a file CONFIGURE containing a definition such as,
  COMPCERT=../compcert
Make sure that you have the right version of CompCert!  Check
the file vst/compcert/VERSION to be sure.
Warning:  On cygwin, the definition  COMPCERT=../compcert
works fine, but an absolute pathname such as  COMPCERT=/home/user/compcert
does not work, as coqdep breaks for some reason.

